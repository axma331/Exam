Assignment name  : mini_paint
Expected files   : *.c *.h
Allowed functions: fopen, fread, fscanf, fclose, write, malloc, calloc, realloc, free, memset, powf, sqrtf
--------------------------------------------------------------------------------------

Write a program that will read an "operation file" and print the result in the terminal

Your program must take one argument, it will be the path to the "operation file"
If 0 or more than 1 argument is given to your program write "Error: argument" followed by a \n in STDOUT

$> ./mini_paint | cat -e
Error: argument$
$> ./mini_paint do not fear mathematics | cat -e
Error: argument$
$> 

If any problem occurs while you open and/or read the "operation file" write "Error: Operation file corrupted" followed by a \n in STDOUT

The "operation file" will contains lines with one operation per line
If a line is incorrect an error occurs.
If an error has occured your program must return 1
If no error has occured it must return 0
The last line can be with or without a \n
The lines must be read in order and therefore operations must be executed in the same order
There must be one space between each variable in a line

WIDTH HEIGHT BACKGROUND_CHAR
This line is always the first line of the file and it defines the zone where to draw. Your program should not display anything outside the draw zone. It must be there only once.
- WIDTH: must be a int with 0 < WIDTH <= 300, the horizontal number of characters to use for the draw zone
- HEIGHT: must be a int with 0 < HEIGHT <= 300, the vertical number of characters to use for the draw zone 
- BACKGROUND_CHAR: any empty space will be filled with BACKGROUND_CHAR

c X Y RADIUS CHAR
This operation will draw a empty circle, where only the border of the circle is drawn
- c: the character c
- X: a float, the horizontal position of the center of the circle
- Y: a float, the vertical position of the center of the circle
- RADIUS: a positive float but not 0, the radius of the circle
- CHAR: the char use to draw the circle

C X Y RADIUS  CHAR
This operation will draw a filled circle
- C: the character C
- X: a float, the horizontal position of the center of the circle
- Y: a float, the vertical position of the center of the circle
- RADIUS: a positive float but not 0, the radius of the circle
- CHAR: the char use to draw the circle


The draw zone is divided in rectangles that can contain one character each (because we are in a terminal...), we will call them pixel
To make everything easier, we will use only the top left corner of the pixel to know if that pixel is in a circle or not
If the distance between the top left corner of a pixel and the center of a circle is lower or equal to the radius of the circle, the pixel is part of the circle
but also:
	A pixel with a top left corner with a distance bigger or equal than 1 from the border of a circle is not part of an empty circle 
	A pixel with a top left corner with a distance lower than 1 from the border of a circle is part of an empty circle.

You should look at the image while reading the next few lines. It represents a terminal. We've set a draw zone of WIDTH 5 and HEIGHT 3.
We've wrote different character to help you understand the following explanations.
- If you want to draw the operation: C 1.5 1.5 1 0 @ (the pink circle)
-- it means that the characters 'b', 'c', 'B', 'C' in the image will be replaced by '@'

You should find our_mini_paint to help you test yours with some operation_file.example

Hint:
If you've got 2 points are defined as (Xa,Ya) and (Xb,Yb)
You can get the distance between the two points with this formula: srqt((Xa - Xb) * (Xa - Xb) + (Ya - Yb) * (Ya - Yb))

-------------------------------------------------------------------------------------------------------------------

Напишите программу, которая будет считывать "операционный файл" и печатать результат в терминале

Ваша программа должна принять один аргумент, это будет путь к файлу " operation"
Если вашей программе задано 0 или более 1 аргумента, напишите "Error: argument", а затем \n в STDOUT

$> ./mini_paint | cat -e
Error: argument$
$> ./mini_paint do not fear mathematics | cat -e
Error: argument$
$> 

Если какая-либо проблема возникает при открытии и / или чтении "операционного файла", напишите "ошибка: операционный файл поврежден", а затем \n в STDOUT

"Операционный файл" будет содержать строки с одной операцией в строке
Если строка неверна, то возникает ошибка.
Если произошла ошибка ваша программа должна вернуть 1
Если никакой ошибки не произошло он должен вернуть 0
Последняя строка может быть с или без \n
Строки должны быть прочитаны по порядку и поэтому операции должны выполняться в том же порядке
Между каждой переменной в строке должно быть по одному пробелу

WIDTH HEIGHT BACKGROUND_CHAR
Эта строка всегда является первой строкой файла и определяет зону, в которой нужно рисовать. Ваша программа не должна отображать ничего за пределами зоны розыгрыша. Он должен быть там только один раз.
- WIDTH: должен быть int с 0 < WIDTH <= 300, горизонтальное количество символов, используемых для зоны рисования
- HEIGHT: должен быть int с 0 < HEIGHT <= 300, вертикальное количество символов, используемых для зоны рисования
- BACKGROUND_CHAR: любое пустое пространство будет заполнено BACKGROUND_CHAR

c X Y RADIUS CHAR
Эта операция нарисует пустой круг, где будет нарисована только граница круга
- c: символ c
- X: float, горизонтальное положение центра круга
- Y: float, вертикальное положение центра круга
- RADIUS: положительный float, но не 0, радиус окружности
- CHAR: символ используется для рисования круга

C X Y RADIUS  CHAR
Эта операция нарисует заполненный круг
- C: символ C
- X: float, горизонтальное положение центра круга
- Y: float, вертикальное положение центра круга
- RADIUS: положительный float, но не 0, радиус окружности
- CHAR: символ используется для рисования круга

Зона рисования разделена на прямоугольники, которые могут содержать по одному символу каждый (потому что мы находимся в терминале...), мы будем называть их пиксельными
Чтобы сделать все проще, мы будем использовать только верхний левый угол пикселя, чтобы узнать, находится ли этот пиксель в круге или нет
Если расстояние между верхним левым углом пикселя и центром окружности меньше или равно радиусу окружности, то пиксель является частью окружности
но также:
Пиксель с верхним левым углом на расстоянии больше или равном 1 от границы окружности не является частью пустого круга
Пиксель с верхним левым углом и расстоянием ниже 1 от границы окружности является частью пустого круга.

Вы должны смотреть на изображение, читая следующие несколько строк. Он представляет собой терминал. Мы установили зону розыгрыша шириной 5 и высотой 3.
Мы написали другой символ, чтобы помочь вам понять следующие объяснения.
- Если вы хотите нарисовать операцию: C 1.5 1.5 1 0 @ (розовый круг)
-- это означает, что символы "b", "c", "B", " C "в изображении будут заменены на"@".

Вы должны найти our_mini_paint, чтобы помочь вам протестировать ваш с некоторым operation_file.пример

Подсказка:
Если у вас есть 2 точки, то они определяются как (Xa, Ya) и (Xb, Yb)
Вы можете получить расстояние между двумя точками по следующей формуле: srqt ((Xa - Xb) * (Xa - Xb) + (Ya-Yb) * (Ya-Yb))